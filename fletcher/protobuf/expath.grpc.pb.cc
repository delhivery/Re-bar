// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: expath.proto

#include "expath.pb.h"
#include "expath.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace expath {

static const char* EPServices_method_names[] = {
  "/expath.EPServices/AddEdge",
  "/expath.EPServices/RemoveEdge",
  "/expath.EPServices/SearchEdge",
};

std::unique_ptr< EPServices::Stub> EPServices::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< EPServices::Stub> stub(new EPServices::Stub(channel));
  return stub;
}

EPServices::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AddEdge_(EPServices_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveEdge_(EPServices_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchEdge_(EPServices_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EPServices::Stub::AddEdge(::grpc::ClientContext* context, const ::expath::Edge& request, ::expath::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddEdge_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::expath::Response>* EPServices::Stub::AsyncAddEdgeRaw(::grpc::ClientContext* context, const ::expath::Edge& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::expath::Response>(channel_.get(), cq, rpcmethod_AddEdge_, context, request);
}

::grpc::Status EPServices::Stub::RemoveEdge(::grpc::ClientContext* context, const ::expath::Edge& request, ::expath::Response* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveEdge_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::expath::Response>* EPServices::Stub::AsyncRemoveEdgeRaw(::grpc::ClientContext* context, const ::expath::Edge& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::expath::Response>(channel_.get(), cq, rpcmethod_RemoveEdge_, context, request);
}

::grpc::Status EPServices::Stub::SearchEdge(::grpc::ClientContext* context, const ::expath::Edge& request, ::expath::FindResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SearchEdge_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::expath::FindResponse>* EPServices::Stub::AsyncSearchEdgeRaw(::grpc::ClientContext* context, const ::expath::Edge& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::expath::FindResponse>(channel_.get(), cq, rpcmethod_SearchEdge_, context, request);
}

EPServices::Service::Service() {
  (void)EPServices_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      EPServices_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< EPServices::Service, ::expath::Edge, ::expath::Response>(
          std::mem_fn(&EPServices::Service::AddEdge), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      EPServices_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< EPServices::Service, ::expath::Edge, ::expath::Response>(
          std::mem_fn(&EPServices::Service::RemoveEdge), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      EPServices_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< EPServices::Service, ::expath::Edge, ::expath::FindResponse>(
          std::mem_fn(&EPServices::Service::SearchEdge), this)));
}

EPServices::Service::~Service() {
}

::grpc::Status EPServices::Service::AddEdge(::grpc::ServerContext* context, const ::expath::Edge* request, ::expath::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EPServices::Service::RemoveEdge(::grpc::ServerContext* context, const ::expath::Edge* request, ::expath::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EPServices::Service::SearchEdge(::grpc::ServerContext* context, const ::expath::Edge* request, ::expath::FindResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace expath

