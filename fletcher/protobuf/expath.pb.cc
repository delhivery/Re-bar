// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expath.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "expath.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace expath {

namespace {

const ::google::protobuf::Descriptor* Feature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Feature_reflection_ = NULL;
const ::google::protobuf::Descriptor* Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Edge_ConnectionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_expath_2eproto() {
  protobuf_AddDesc_expath_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "expath.proto");
  GOOGLE_CHECK(file != NULL);
  Feature_descriptor_ = file->message_type(0);
  static const int Feature_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, value_),
  };
  Feature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Feature_descriptor_,
      Feature::default_instance_,
      Feature_offsets_,
      -1,
      -1,
      -1,
      sizeof(Feature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _is_default_instance_));
  Edge_descriptor_ = file->message_type(1);
  static const int Edge_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, aggregate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, outbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, inbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, departure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, features_),
  };
  Edge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Edge_descriptor_,
      Edge::default_instance_,
      Edge_offsets_,
      -1,
      -1,
      -1,
      sizeof(Edge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _is_default_instance_));
  Edge_ConnectionType_descriptor_ = Edge_descriptor_->enum_type(0);
  Response_descriptor_ = file->message_type(2);
  static const int Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, message_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  FindResponse_descriptor_ = file->message_type(3);
  static const int FindResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindResponse, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindResponse, edge_),
  };
  FindResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FindResponse_descriptor_,
      FindResponse::default_instance_,
      FindResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(FindResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_expath_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Feature_descriptor_, &Feature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Edge_descriptor_, &Edge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FindResponse_descriptor_, &FindResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_expath_2eproto() {
  delete Feature::default_instance_;
  delete Feature_reflection_;
  delete Edge::default_instance_;
  delete Edge_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete FindResponse::default_instance_;
  delete FindResponse_reflection_;
}

void protobuf_AddDesc_expath_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014expath.proto\022\006expath\"&\n\007Feature\022\014\n\004typ"
    "e\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\256\002\n\004Edge\022\016\n\006sourc"
    "e\030\001 \001(\t\022\023\n\013destination\030\002 \001(\t\022\014\n\004code\030\003 \001"
    "(\t\022\021\n\taggregate\030\004 \001(\003\022\020\n\010outbound\030\005 \001(\003\022"
    "\017\n\007inbound\030\006 \001(\003\022\014\n\004cost\030\007 \001(\001\022)\n\004type\030\010"
    " \001(\0162\033.expath.Edge.ConnectionType\022\021\n\tdep"
    "arture\030\t \001(\003\022\020\n\010duration\030\n \001(\003\022!\n\010featur"
    "es\030\013 \003(\0132\017.expath.Feature\"<\n\016ConnectionT"
    "ype\022\r\n\tUNDEFINED\020\000\022\013\n\007CUSTODY\020\001\022\016\n\nPERSI"
    "STENT\020\002\",\n\010Response\022\017\n\007success\030\001 \001(\010\022\017\n\007"
    "message\030\002 \001(\t\"N\n\014FindResponse\022\"\n\010respons"
    "e\030\001 \001(\0132\020.expath.Response\022\032\n\004edge\030\002 \001(\0132"
    "\014.expath.Edge2\227\001\n\nEPServices\022)\n\007AddEdge\022"
    "\014.expath.Edge\032\020.expath.Response\022,\n\nRemov"
    "eEdge\022\014.expath.Edge\032\020.expath.Response\0220\n"
    "\nSearchEdge\022\014.expath.Edge\032\024.expath.FindR"
    "esponseb\006proto3", 655);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "expath.proto", &protobuf_RegisterTypes);
  Feature::default_instance_ = new Feature();
  Edge::default_instance_ = new Edge();
  Response::default_instance_ = new Response();
  FindResponse::default_instance_ = new FindResponse();
  Feature::default_instance_->InitAsDefaultInstance();
  Edge::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  FindResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_expath_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_expath_2eproto {
  StaticDescriptorInitializer_expath_2eproto() {
    protobuf_AddDesc_expath_2eproto();
  }
} static_descriptor_initializer_expath_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feature::kTypeFieldNumber;
const int Feature::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feature::Feature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:expath.Feature)
}

void Feature::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Feature::Feature(const Feature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:expath.Feature)
}

void Feature::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:expath.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Feature_descriptor_;
}

const Feature& Feature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expath_2eproto();
  return *default_instance_;
}

Feature* Feature::default_instance_ = NULL;

Feature* Feature::New(::google::protobuf::Arena* arena) const {
  Feature* n = new Feature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:expath.Feature)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:expath.Feature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "expath.Feature.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "expath.Feature.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:expath.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:expath.Feature)
  return false;
#undef DO_
}

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:expath.Feature)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "expath.Feature.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "expath.Feature.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:expath.Feature)
}

::google::protobuf::uint8* Feature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:expath.Feature)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "expath.Feature.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "expath.Feature.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:expath.Feature)
  return target;
}

int Feature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:expath.Feature)
  int total_size = 0;

  // optional string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:expath.Feature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Feature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Feature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:expath.Feature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:expath.Feature)
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:expath.Feature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Feature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:expath.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:expath.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {

  return true;
}

void Feature::Swap(Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feature::InternalSwap(Feature* other) {
  type_.Swap(&other->type_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Feature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Feature_descriptor_;
  metadata.reflection = Feature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feature

// optional string type = 1;
void Feature::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::type() const {
  // @@protoc_insertion_point(field_get:expath.Feature.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expath.Feature.type)
}
 void Feature::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expath.Feature.type)
}
 void Feature::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expath.Feature.type)
}
 ::std::string* Feature::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:expath.Feature.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_type() {
  // @@protoc_insertion_point(field_release:expath.Feature.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:expath.Feature.type)
}

// optional string value = 2;
void Feature::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Feature::value() const {
  // @@protoc_insertion_point(field_get:expath.Feature.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expath.Feature.value)
}
 void Feature::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expath.Feature.value)
}
 void Feature::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expath.Feature.value)
}
 ::std::string* Feature::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:expath.Feature.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Feature::release_value() {
  // @@protoc_insertion_point(field_release:expath.Feature.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Feature::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:expath.Feature.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Edge_ConnectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_ConnectionType_descriptor_;
}
bool Edge_ConnectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Edge_ConnectionType Edge::UNDEFINED;
const Edge_ConnectionType Edge::CUSTODY;
const Edge_ConnectionType Edge::PERSISTENT;
const Edge_ConnectionType Edge::ConnectionType_MIN;
const Edge_ConnectionType Edge::ConnectionType_MAX;
const int Edge::ConnectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edge::kSourceFieldNumber;
const int Edge::kDestinationFieldNumber;
const int Edge::kCodeFieldNumber;
const int Edge::kAggregateFieldNumber;
const int Edge::kOutboundFieldNumber;
const int Edge::kInboundFieldNumber;
const int Edge::kCostFieldNumber;
const int Edge::kTypeFieldNumber;
const int Edge::kDepartureFieldNumber;
const int Edge::kDurationFieldNumber;
const int Edge::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edge::Edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:expath.Edge)
}

void Edge::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Edge::Edge(const Edge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:expath.Edge)
}

void Edge::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aggregate_ = GOOGLE_LONGLONG(0);
  outbound_ = GOOGLE_LONGLONG(0);
  inbound_ = GOOGLE_LONGLONG(0);
  cost_ = 0;
  type_ = 0;
  departure_ = GOOGLE_LONGLONG(0);
  duration_ = GOOGLE_LONGLONG(0);
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:expath.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_descriptor_;
}

const Edge& Edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expath_2eproto();
  return *default_instance_;
}

Edge* Edge::default_instance_ = NULL;

Edge* Edge::New(::google::protobuf::Arena* arena) const {
  Edge* n = new Edge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:expath.Edge)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Edge, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Edge*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(aggregate_, cost_);
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ZR_(departure_, duration_);

#undef ZR_HELPER_
#undef ZR_

  features_.Clear();
}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:expath.Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "expath.Edge.source"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_destination;
        break;
      }

      // optional string destination = 2;
      case 2: {
        if (tag == 18) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination().data(), this->destination().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "expath.Edge.destination"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_code;
        break;
      }

      // optional string code = 3;
      case 3: {
        if (tag == 26) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "expath.Edge.code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_aggregate;
        break;
      }

      // optional int64 aggregate = 4;
      case 4: {
        if (tag == 32) {
         parse_aggregate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &aggregate_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_outbound;
        break;
      }

      // optional int64 outbound = 5;
      case 5: {
        if (tag == 40) {
         parse_outbound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &outbound_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_inbound;
        break;
      }

      // optional int64 inbound = 6;
      case 6: {
        if (tag == 48) {
         parse_inbound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inbound_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_cost;
        break;
      }

      // optional double cost = 7;
      case 7: {
        if (tag == 57) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // optional .expath.Edge.ConnectionType type = 8;
      case 8: {
        if (tag == 64) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::expath::Edge_ConnectionType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_departure;
        break;
      }

      // optional int64 departure = 9;
      case 9: {
        if (tag == 72) {
         parse_departure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &departure_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_duration;
        break;
      }

      // optional int64 duration = 10;
      case 10: {
        if (tag == 80) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_features;
        break;
      }

      // repeated .expath.Feature features = 11;
      case 11: {
        if (tag == 90) {
         parse_features:
          DO_(input->IncrementRecursionDepth());
         parse_loop_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_features;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:expath.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:expath.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:expath.Edge)
  // optional string source = 1;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "expath.Edge.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional string destination = 2;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "expath.Edge.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->destination(), output);
  }

  // optional string code = 3;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "expath.Edge.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->code(), output);
  }

  // optional int64 aggregate = 4;
  if (this->aggregate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->aggregate(), output);
  }

  // optional int64 outbound = 5;
  if (this->outbound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->outbound(), output);
  }

  // optional int64 inbound = 6;
  if (this->inbound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->inbound(), output);
  }

  // optional double cost = 7;
  if (this->cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->cost(), output);
  }

  // optional .expath.Edge.ConnectionType type = 8;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type(), output);
  }

  // optional int64 departure = 9;
  if (this->departure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->departure(), output);
  }

  // optional int64 duration = 10;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->duration(), output);
  }

  // repeated .expath.Feature features = 11;
  for (unsigned int i = 0, n = this->features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->features(i), output);
  }

  // @@protoc_insertion_point(serialize_end:expath.Edge)
}

::google::protobuf::uint8* Edge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:expath.Edge)
  // optional string source = 1;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "expath.Edge.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional string destination = 2;
  if (this->destination().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "expath.Edge.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destination(), target);
  }

  // optional string code = 3;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "expath.Edge.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code(), target);
  }

  // optional int64 aggregate = 4;
  if (this->aggregate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->aggregate(), target);
  }

  // optional int64 outbound = 5;
  if (this->outbound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->outbound(), target);
  }

  // optional int64 inbound = 6;
  if (this->inbound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->inbound(), target);
  }

  // optional double cost = 7;
  if (this->cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->cost(), target);
  }

  // optional .expath.Edge.ConnectionType type = 8;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->type(), target);
  }

  // optional int64 departure = 9;
  if (this->departure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->departure(), target);
  }

  // optional int64 duration = 10;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->duration(), target);
  }

  // repeated .expath.Feature features = 11;
  for (unsigned int i = 0, n = this->features_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->features(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:expath.Edge)
  return target;
}

int Edge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:expath.Edge)
  int total_size = 0;

  // optional string source = 1;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // optional string destination = 2;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination());
  }

  // optional string code = 3;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  // optional int64 aggregate = 4;
  if (this->aggregate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->aggregate());
  }

  // optional int64 outbound = 5;
  if (this->outbound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->outbound());
  }

  // optional int64 inbound = 6;
  if (this->inbound() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->inbound());
  }

  // optional double cost = 7;
  if (this->cost() != 0) {
    total_size += 1 + 8;
  }

  // optional .expath.Edge.ConnectionType type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional int64 departure = 9;
  if (this->departure() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->departure());
  }

  // optional int64 duration = 10;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->duration());
  }

  // repeated .expath.Feature features = 11;
  total_size += 1 * this->features_size();
  for (int i = 0; i < this->features_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->features(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:expath.Edge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Edge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Edge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:expath.Edge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:expath.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:expath.Edge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  features_.MergeFrom(from.features_);
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.destination().size() > 0) {

    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.aggregate() != 0) {
    set_aggregate(from.aggregate());
  }
  if (from.outbound() != 0) {
    set_outbound(from.outbound());
  }
  if (from.inbound() != 0) {
    set_inbound(from.inbound());
  }
  if (from.cost() != 0) {
    set_cost(from.cost());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.departure() != 0) {
    set_departure(from.departure());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:expath.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:expath.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {

  return true;
}

void Edge::Swap(Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edge::InternalSwap(Edge* other) {
  source_.Swap(&other->source_);
  destination_.Swap(&other->destination_);
  code_.Swap(&other->code_);
  std::swap(aggregate_, other->aggregate_);
  std::swap(outbound_, other->outbound_);
  std::swap(inbound_, other->inbound_);
  std::swap(cost_, other->cost_);
  std::swap(type_, other->type_);
  std::swap(departure_, other->departure_);
  std::swap(duration_, other->duration_);
  features_.UnsafeArenaSwap(&other->features_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge_descriptor_;
  metadata.reflection = Edge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Edge

// optional string source = 1;
void Edge::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Edge::source() const {
  // @@protoc_insertion_point(field_get:expath.Edge.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Edge::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expath.Edge.source)
}
 void Edge::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expath.Edge.source)
}
 void Edge::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expath.Edge.source)
}
 ::std::string* Edge::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:expath.Edge.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Edge::release_source() {
  // @@protoc_insertion_point(field_release:expath.Edge.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Edge::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:expath.Edge.source)
}

// optional string destination = 2;
void Edge::clear_destination() {
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Edge::destination() const {
  // @@protoc_insertion_point(field_get:expath.Edge.destination)
  return destination_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Edge::set_destination(const ::std::string& value) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expath.Edge.destination)
}
 void Edge::set_destination(const char* value) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expath.Edge.destination)
}
 void Edge::set_destination(const char* value, size_t size) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expath.Edge.destination)
}
 ::std::string* Edge::mutable_destination() {
  
  // @@protoc_insertion_point(field_mutable:expath.Edge.destination)
  return destination_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Edge::release_destination() {
  // @@protoc_insertion_point(field_release:expath.Edge.destination)
  
  return destination_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Edge::set_allocated_destination(::std::string* destination) {
  if (destination != NULL) {
    
  } else {
    
  }
  destination_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination);
  // @@protoc_insertion_point(field_set_allocated:expath.Edge.destination)
}

// optional string code = 3;
void Edge::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Edge::code() const {
  // @@protoc_insertion_point(field_get:expath.Edge.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Edge::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expath.Edge.code)
}
 void Edge::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expath.Edge.code)
}
 void Edge::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expath.Edge.code)
}
 ::std::string* Edge::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:expath.Edge.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Edge::release_code() {
  // @@protoc_insertion_point(field_release:expath.Edge.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Edge::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:expath.Edge.code)
}

// optional int64 aggregate = 4;
void Edge::clear_aggregate() {
  aggregate_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Edge::aggregate() const {
  // @@protoc_insertion_point(field_get:expath.Edge.aggregate)
  return aggregate_;
}
 void Edge::set_aggregate(::google::protobuf::int64 value) {
  
  aggregate_ = value;
  // @@protoc_insertion_point(field_set:expath.Edge.aggregate)
}

// optional int64 outbound = 5;
void Edge::clear_outbound() {
  outbound_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Edge::outbound() const {
  // @@protoc_insertion_point(field_get:expath.Edge.outbound)
  return outbound_;
}
 void Edge::set_outbound(::google::protobuf::int64 value) {
  
  outbound_ = value;
  // @@protoc_insertion_point(field_set:expath.Edge.outbound)
}

// optional int64 inbound = 6;
void Edge::clear_inbound() {
  inbound_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Edge::inbound() const {
  // @@protoc_insertion_point(field_get:expath.Edge.inbound)
  return inbound_;
}
 void Edge::set_inbound(::google::protobuf::int64 value) {
  
  inbound_ = value;
  // @@protoc_insertion_point(field_set:expath.Edge.inbound)
}

// optional double cost = 7;
void Edge::clear_cost() {
  cost_ = 0;
}
 double Edge::cost() const {
  // @@protoc_insertion_point(field_get:expath.Edge.cost)
  return cost_;
}
 void Edge::set_cost(double value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:expath.Edge.cost)
}

// optional .expath.Edge.ConnectionType type = 8;
void Edge::clear_type() {
  type_ = 0;
}
 ::expath::Edge_ConnectionType Edge::type() const {
  // @@protoc_insertion_point(field_get:expath.Edge.type)
  return static_cast< ::expath::Edge_ConnectionType >(type_);
}
 void Edge::set_type(::expath::Edge_ConnectionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:expath.Edge.type)
}

// optional int64 departure = 9;
void Edge::clear_departure() {
  departure_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Edge::departure() const {
  // @@protoc_insertion_point(field_get:expath.Edge.departure)
  return departure_;
}
 void Edge::set_departure(::google::protobuf::int64 value) {
  
  departure_ = value;
  // @@protoc_insertion_point(field_set:expath.Edge.departure)
}

// optional int64 duration = 10;
void Edge::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Edge::duration() const {
  // @@protoc_insertion_point(field_get:expath.Edge.duration)
  return duration_;
}
 void Edge::set_duration(::google::protobuf::int64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:expath.Edge.duration)
}

// repeated .expath.Feature features = 11;
int Edge::features_size() const {
  return features_.size();
}
void Edge::clear_features() {
  features_.Clear();
}
const ::expath::Feature& Edge::features(int index) const {
  // @@protoc_insertion_point(field_get:expath.Edge.features)
  return features_.Get(index);
}
::expath::Feature* Edge::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:expath.Edge.features)
  return features_.Mutable(index);
}
::expath::Feature* Edge::add_features() {
  // @@protoc_insertion_point(field_add:expath.Edge.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::expath::Feature >*
Edge::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:expath.Edge.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::expath::Feature >&
Edge::features() const {
  // @@protoc_insertion_point(field_list:expath.Edge.features)
  return features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kSuccessFieldNumber;
const int Response::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:expath.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:expath.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:expath.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expath_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:expath.Response)
  success_ = false;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:expath.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "expath.Response.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:expath.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:expath.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:expath.Response)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "expath.Response.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:expath.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:expath.Response)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "expath.Response.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:expath.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:expath.Response)
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:expath.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:expath.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:expath.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:expath.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:expath.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:expath.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(success_, other->success_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional bool success = 1;
void Response::clear_success() {
  success_ = false;
}
 bool Response::success() const {
  // @@protoc_insertion_point(field_get:expath.Response.success)
  return success_;
}
 void Response::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:expath.Response.success)
}

// optional string message = 2;
void Response::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:expath.Response.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expath.Response.message)
}
 void Response::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expath.Response.message)
}
 void Response::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expath.Response.message)
}
 ::std::string* Response::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:expath.Response.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:expath.Response.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:expath.Response.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindResponse::kResponseFieldNumber;
const int FindResponse::kEdgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindResponse::FindResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:expath.FindResponse)
}

void FindResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  response_ = const_cast< ::expath::Response*>(&::expath::Response::default_instance());
  edge_ = const_cast< ::expath::Edge*>(&::expath::Edge::default_instance());
}

FindResponse::FindResponse(const FindResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:expath.FindResponse)
}

void FindResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  response_ = NULL;
  edge_ = NULL;
}

FindResponse::~FindResponse() {
  // @@protoc_insertion_point(destructor:expath.FindResponse)
  SharedDtor();
}

void FindResponse::SharedDtor() {
  if (this != default_instance_) {
    delete response_;
    delete edge_;
  }
}

void FindResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindResponse_descriptor_;
}

const FindResponse& FindResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_expath_2eproto();
  return *default_instance_;
}

FindResponse* FindResponse::default_instance_ = NULL;

FindResponse* FindResponse::New(::google::protobuf::Arena* arena) const {
  FindResponse* n = new FindResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FindResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:expath.FindResponse)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
  if (GetArenaNoVirtual() == NULL && edge_ != NULL) delete edge_;
  edge_ = NULL;
}

bool FindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:expath.FindResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .expath.Response response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_edge;
        break;
      }

      // optional .expath.Edge edge = 2;
      case 2: {
        if (tag == 18) {
         parse_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:expath.FindResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:expath.FindResponse)
  return false;
#undef DO_
}

void FindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:expath.FindResponse)
  // optional .expath.Response response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // optional .expath.Edge edge = 2;
  if (this->has_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->edge_, output);
  }

  // @@protoc_insertion_point(serialize_end:expath.FindResponse)
}

::google::protobuf::uint8* FindResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:expath.FindResponse)
  // optional .expath.Response response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->response_, target);
  }

  // optional .expath.Edge edge = 2;
  if (this->has_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->edge_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:expath.FindResponse)
  return target;
}

int FindResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:expath.FindResponse)
  int total_size = 0;

  // optional .expath.Response response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // optional .expath.Edge edge = 2;
  if (this->has_edge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->edge_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:expath.FindResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FindResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FindResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:expath.FindResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:expath.FindResponse)
    MergeFrom(*source);
  }
}

void FindResponse::MergeFrom(const FindResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:expath.FindResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_response()) {
    mutable_response()->::expath::Response::MergeFrom(from.response());
  }
  if (from.has_edge()) {
    mutable_edge()->::expath::Edge::MergeFrom(from.edge());
  }
}

void FindResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:expath.FindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindResponse::CopyFrom(const FindResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:expath.FindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindResponse::IsInitialized() const {

  return true;
}

void FindResponse::Swap(FindResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindResponse::InternalSwap(FindResponse* other) {
  std::swap(response_, other->response_);
  std::swap(edge_, other->edge_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FindResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindResponse_descriptor_;
  metadata.reflection = FindResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FindResponse

// optional .expath.Response response = 1;
bool FindResponse::has_response() const {
  return !_is_default_instance_ && response_ != NULL;
}
void FindResponse::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::expath::Response& FindResponse::response() const {
  // @@protoc_insertion_point(field_get:expath.FindResponse.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
::expath::Response* FindResponse::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::expath::Response;
  }
  // @@protoc_insertion_point(field_mutable:expath.FindResponse.response)
  return response_;
}
::expath::Response* FindResponse::release_response() {
  // @@protoc_insertion_point(field_release:expath.FindResponse.response)
  
  ::expath::Response* temp = response_;
  response_ = NULL;
  return temp;
}
void FindResponse::set_allocated_response(::expath::Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:expath.FindResponse.response)
}

// optional .expath.Edge edge = 2;
bool FindResponse::has_edge() const {
  return !_is_default_instance_ && edge_ != NULL;
}
void FindResponse::clear_edge() {
  if (GetArenaNoVirtual() == NULL && edge_ != NULL) delete edge_;
  edge_ = NULL;
}
const ::expath::Edge& FindResponse::edge() const {
  // @@protoc_insertion_point(field_get:expath.FindResponse.edge)
  return edge_ != NULL ? *edge_ : *default_instance_->edge_;
}
::expath::Edge* FindResponse::mutable_edge() {
  
  if (edge_ == NULL) {
    edge_ = new ::expath::Edge;
  }
  // @@protoc_insertion_point(field_mutable:expath.FindResponse.edge)
  return edge_;
}
::expath::Edge* FindResponse::release_edge() {
  // @@protoc_insertion_point(field_release:expath.FindResponse.edge)
  
  ::expath::Edge* temp = edge_;
  edge_ = NULL;
  return temp;
}
void FindResponse::set_allocated_edge(::expath::Edge* edge) {
  delete edge_;
  edge_ = edge;
  if (edge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:expath.FindResponse.edge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace expath

// @@protoc_insertion_point(global_scope)
