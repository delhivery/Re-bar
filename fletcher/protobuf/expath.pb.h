// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expath.proto

#ifndef PROTOBUF_expath_2eproto__INCLUDED
#define PROTOBUF_expath_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace expath {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_expath_2eproto();
void protobuf_AssignDesc_expath_2eproto();
void protobuf_ShutdownFile_expath_2eproto();

class Edge;
class Feature;
class FindResponse;
class Response;

enum Edge_ConnectionType {
  Edge_ConnectionType_UNDEFINED = 0,
  Edge_ConnectionType_CUSTODY = 1,
  Edge_ConnectionType_PERSISTENT = 2,
  Edge_ConnectionType_Edge_ConnectionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Edge_ConnectionType_Edge_ConnectionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Edge_ConnectionType_IsValid(int value);
const Edge_ConnectionType Edge_ConnectionType_ConnectionType_MIN = Edge_ConnectionType_UNDEFINED;
const Edge_ConnectionType Edge_ConnectionType_ConnectionType_MAX = Edge_ConnectionType_PERSISTENT;
const int Edge_ConnectionType_ConnectionType_ARRAYSIZE = Edge_ConnectionType_ConnectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Edge_ConnectionType_descriptor();
inline const ::std::string& Edge_ConnectionType_Name(Edge_ConnectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Edge_ConnectionType_descriptor(), value);
}
inline bool Edge_ConnectionType_Parse(
    const ::std::string& name, Edge_ConnectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Edge_ConnectionType>(
    Edge_ConnectionType_descriptor(), name, value);
}
// ===================================================================

class Feature : public ::google::protobuf::Message {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Feature& default_instance();

  void Swap(Feature* other);

  // implements Message ----------------------------------------------

  inline Feature* New() const { return New(NULL); }

  Feature* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Feature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:expath.Feature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_expath_2eproto();
  friend void protobuf_AssignDesc_expath_2eproto();
  friend void protobuf_ShutdownFile_expath_2eproto();

  void InitAsDefaultInstance();
  static Feature* default_instance_;
};
// -------------------------------------------------------------------

class Edge : public ::google::protobuf::Message {
 public:
  Edge();
  virtual ~Edge();

  Edge(const Edge& from);

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Edge& default_instance();

  void Swap(Edge* other);

  // implements Message ----------------------------------------------

  inline Edge* New() const { return New(NULL); }

  Edge* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Edge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Edge_ConnectionType ConnectionType;
  static const ConnectionType UNDEFINED =
    Edge_ConnectionType_UNDEFINED;
  static const ConnectionType CUSTODY =
    Edge_ConnectionType_CUSTODY;
  static const ConnectionType PERSISTENT =
    Edge_ConnectionType_PERSISTENT;
  static inline bool ConnectionType_IsValid(int value) {
    return Edge_ConnectionType_IsValid(value);
  }
  static const ConnectionType ConnectionType_MIN =
    Edge_ConnectionType_ConnectionType_MIN;
  static const ConnectionType ConnectionType_MAX =
    Edge_ConnectionType_ConnectionType_MAX;
  static const int ConnectionType_ARRAYSIZE =
    Edge_ConnectionType_ConnectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConnectionType_descriptor() {
    return Edge_ConnectionType_descriptor();
  }
  static inline const ::std::string& ConnectionType_Name(ConnectionType value) {
    return Edge_ConnectionType_Name(value);
  }
  static inline bool ConnectionType_Parse(const ::std::string& name,
      ConnectionType* value) {
    return Edge_ConnectionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string destination = 2;
  void clear_destination();
  static const int kDestinationFieldNumber = 2;
  const ::std::string& destination() const;
  void set_destination(const ::std::string& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  ::std::string* mutable_destination();
  ::std::string* release_destination();
  void set_allocated_destination(::std::string* destination);

  // optional string code = 3;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional int64 aggregate = 4;
  void clear_aggregate();
  static const int kAggregateFieldNumber = 4;
  ::google::protobuf::int64 aggregate() const;
  void set_aggregate(::google::protobuf::int64 value);

  // optional int64 outbound = 5;
  void clear_outbound();
  static const int kOutboundFieldNumber = 5;
  ::google::protobuf::int64 outbound() const;
  void set_outbound(::google::protobuf::int64 value);

  // optional int64 inbound = 6;
  void clear_inbound();
  static const int kInboundFieldNumber = 6;
  ::google::protobuf::int64 inbound() const;
  void set_inbound(::google::protobuf::int64 value);

  // optional double cost = 7;
  void clear_cost();
  static const int kCostFieldNumber = 7;
  double cost() const;
  void set_cost(double value);

  // optional .expath.Edge.ConnectionType type = 8;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::expath::Edge_ConnectionType type() const;
  void set_type(::expath::Edge_ConnectionType value);

  // optional int64 departure = 9;
  void clear_departure();
  static const int kDepartureFieldNumber = 9;
  ::google::protobuf::int64 departure() const;
  void set_departure(::google::protobuf::int64 value);

  // optional int64 duration = 10;
  void clear_duration();
  static const int kDurationFieldNumber = 10;
  ::google::protobuf::int64 duration() const;
  void set_duration(::google::protobuf::int64 value);

  // repeated .expath.Feature features = 11;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 11;
  const ::expath::Feature& features(int index) const;
  ::expath::Feature* mutable_features(int index);
  ::expath::Feature* add_features();
  ::google::protobuf::RepeatedPtrField< ::expath::Feature >*
      mutable_features();
  const ::google::protobuf::RepeatedPtrField< ::expath::Feature >&
      features() const;

  // @@protoc_insertion_point(class_scope:expath.Edge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr destination_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int64 aggregate_;
  ::google::protobuf::int64 outbound_;
  ::google::protobuf::int64 inbound_;
  double cost_;
  ::google::protobuf::int64 departure_;
  ::google::protobuf::int64 duration_;
  ::google::protobuf::RepeatedPtrField< ::expath::Feature > features_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_expath_2eproto();
  friend void protobuf_AssignDesc_expath_2eproto();
  friend void protobuf_ShutdownFile_expath_2eproto();

  void InitAsDefaultInstance();
  static Edge* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:expath.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool success_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_expath_2eproto();
  friend void protobuf_AssignDesc_expath_2eproto();
  friend void protobuf_ShutdownFile_expath_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class FindResponse : public ::google::protobuf::Message {
 public:
  FindResponse();
  virtual ~FindResponse();

  FindResponse(const FindResponse& from);

  inline FindResponse& operator=(const FindResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FindResponse& default_instance();

  void Swap(FindResponse* other);

  // implements Message ----------------------------------------------

  inline FindResponse* New() const { return New(NULL); }

  FindResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FindResponse& from);
  void MergeFrom(const FindResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FindResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .expath.Response response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const ::expath::Response& response() const;
  ::expath::Response* mutable_response();
  ::expath::Response* release_response();
  void set_allocated_response(::expath::Response* response);

  // optional .expath.Edge edge = 2;
  bool has_edge() const;
  void clear_edge();
  static const int kEdgeFieldNumber = 2;
  const ::expath::Edge& edge() const;
  ::expath::Edge* mutable_edge();
  ::expath::Edge* release_edge();
  void set_allocated_edge(::expath::Edge* edge);

  // @@protoc_insertion_point(class_scope:expath.FindResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::expath::Response* response_;
  ::expath::Edge* edge_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_expath_2eproto();
  friend void protobuf_AssignDesc_expath_2eproto();
  friend void protobuf_ShutdownFile_expath_2eproto();

  void InitAsDefaultInstance();
  static FindResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Feature

// optional string type = 1;
inline void Feature::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::type() const {
  // @@protoc_insertion_point(field_get:expath.Feature.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expath.Feature.type)
}
inline void Feature::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expath.Feature.type)
}
inline void Feature::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expath.Feature.type)
}
inline ::std::string* Feature::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:expath.Feature.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_type() {
  // @@protoc_insertion_point(field_release:expath.Feature.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:expath.Feature.type)
}

// optional string value = 2;
inline void Feature::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Feature::value() const {
  // @@protoc_insertion_point(field_get:expath.Feature.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expath.Feature.value)
}
inline void Feature::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expath.Feature.value)
}
inline void Feature::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expath.Feature.value)
}
inline ::std::string* Feature::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:expath.Feature.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_value() {
  // @@protoc_insertion_point(field_release:expath.Feature.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:expath.Feature.value)
}

// -------------------------------------------------------------------

// Edge

// optional string source = 1;
inline void Edge::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Edge::source() const {
  // @@protoc_insertion_point(field_get:expath.Edge.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expath.Edge.source)
}
inline void Edge::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expath.Edge.source)
}
inline void Edge::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expath.Edge.source)
}
inline ::std::string* Edge::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:expath.Edge.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Edge::release_source() {
  // @@protoc_insertion_point(field_release:expath.Edge.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:expath.Edge.source)
}

// optional string destination = 2;
inline void Edge::clear_destination() {
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Edge::destination() const {
  // @@protoc_insertion_point(field_get:expath.Edge.destination)
  return destination_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_destination(const ::std::string& value) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expath.Edge.destination)
}
inline void Edge::set_destination(const char* value) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expath.Edge.destination)
}
inline void Edge::set_destination(const char* value, size_t size) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expath.Edge.destination)
}
inline ::std::string* Edge::mutable_destination() {
  
  // @@protoc_insertion_point(field_mutable:expath.Edge.destination)
  return destination_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Edge::release_destination() {
  // @@protoc_insertion_point(field_release:expath.Edge.destination)
  
  return destination_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_allocated_destination(::std::string* destination) {
  if (destination != NULL) {
    
  } else {
    
  }
  destination_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination);
  // @@protoc_insertion_point(field_set_allocated:expath.Edge.destination)
}

// optional string code = 3;
inline void Edge::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Edge::code() const {
  // @@protoc_insertion_point(field_get:expath.Edge.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expath.Edge.code)
}
inline void Edge::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expath.Edge.code)
}
inline void Edge::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expath.Edge.code)
}
inline ::std::string* Edge::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:expath.Edge.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Edge::release_code() {
  // @@protoc_insertion_point(field_release:expath.Edge.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:expath.Edge.code)
}

// optional int64 aggregate = 4;
inline void Edge::clear_aggregate() {
  aggregate_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Edge::aggregate() const {
  // @@protoc_insertion_point(field_get:expath.Edge.aggregate)
  return aggregate_;
}
inline void Edge::set_aggregate(::google::protobuf::int64 value) {
  
  aggregate_ = value;
  // @@protoc_insertion_point(field_set:expath.Edge.aggregate)
}

// optional int64 outbound = 5;
inline void Edge::clear_outbound() {
  outbound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Edge::outbound() const {
  // @@protoc_insertion_point(field_get:expath.Edge.outbound)
  return outbound_;
}
inline void Edge::set_outbound(::google::protobuf::int64 value) {
  
  outbound_ = value;
  // @@protoc_insertion_point(field_set:expath.Edge.outbound)
}

// optional int64 inbound = 6;
inline void Edge::clear_inbound() {
  inbound_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Edge::inbound() const {
  // @@protoc_insertion_point(field_get:expath.Edge.inbound)
  return inbound_;
}
inline void Edge::set_inbound(::google::protobuf::int64 value) {
  
  inbound_ = value;
  // @@protoc_insertion_point(field_set:expath.Edge.inbound)
}

// optional double cost = 7;
inline void Edge::clear_cost() {
  cost_ = 0;
}
inline double Edge::cost() const {
  // @@protoc_insertion_point(field_get:expath.Edge.cost)
  return cost_;
}
inline void Edge::set_cost(double value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:expath.Edge.cost)
}

// optional .expath.Edge.ConnectionType type = 8;
inline void Edge::clear_type() {
  type_ = 0;
}
inline ::expath::Edge_ConnectionType Edge::type() const {
  // @@protoc_insertion_point(field_get:expath.Edge.type)
  return static_cast< ::expath::Edge_ConnectionType >(type_);
}
inline void Edge::set_type(::expath::Edge_ConnectionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:expath.Edge.type)
}

// optional int64 departure = 9;
inline void Edge::clear_departure() {
  departure_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Edge::departure() const {
  // @@protoc_insertion_point(field_get:expath.Edge.departure)
  return departure_;
}
inline void Edge::set_departure(::google::protobuf::int64 value) {
  
  departure_ = value;
  // @@protoc_insertion_point(field_set:expath.Edge.departure)
}

// optional int64 duration = 10;
inline void Edge::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Edge::duration() const {
  // @@protoc_insertion_point(field_get:expath.Edge.duration)
  return duration_;
}
inline void Edge::set_duration(::google::protobuf::int64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:expath.Edge.duration)
}

// repeated .expath.Feature features = 11;
inline int Edge::features_size() const {
  return features_.size();
}
inline void Edge::clear_features() {
  features_.Clear();
}
inline const ::expath::Feature& Edge::features(int index) const {
  // @@protoc_insertion_point(field_get:expath.Edge.features)
  return features_.Get(index);
}
inline ::expath::Feature* Edge::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:expath.Edge.features)
  return features_.Mutable(index);
}
inline ::expath::Feature* Edge::add_features() {
  // @@protoc_insertion_point(field_add:expath.Edge.features)
  return features_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::expath::Feature >*
Edge::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:expath.Edge.features)
  return &features_;
}
inline const ::google::protobuf::RepeatedPtrField< ::expath::Feature >&
Edge::features() const {
  // @@protoc_insertion_point(field_list:expath.Edge.features)
  return features_;
}

// -------------------------------------------------------------------

// Response

// optional bool success = 1;
inline void Response::clear_success() {
  success_ = false;
}
inline bool Response::success() const {
  // @@protoc_insertion_point(field_get:expath.Response.success)
  return success_;
}
inline void Response::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:expath.Response.success)
}

// optional string message = 2;
inline void Response::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:expath.Response.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:expath.Response.message)
}
inline void Response::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:expath.Response.message)
}
inline void Response::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:expath.Response.message)
}
inline ::std::string* Response::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:expath.Response.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:expath.Response.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:expath.Response.message)
}

// -------------------------------------------------------------------

// FindResponse

// optional .expath.Response response = 1;
inline bool FindResponse::has_response() const {
  return !_is_default_instance_ && response_ != NULL;
}
inline void FindResponse::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::expath::Response& FindResponse::response() const {
  // @@protoc_insertion_point(field_get:expath.FindResponse.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::expath::Response* FindResponse::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::expath::Response;
  }
  // @@protoc_insertion_point(field_mutable:expath.FindResponse.response)
  return response_;
}
inline ::expath::Response* FindResponse::release_response() {
  // @@protoc_insertion_point(field_release:expath.FindResponse.response)
  
  ::expath::Response* temp = response_;
  response_ = NULL;
  return temp;
}
inline void FindResponse::set_allocated_response(::expath::Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:expath.FindResponse.response)
}

// optional .expath.Edge edge = 2;
inline bool FindResponse::has_edge() const {
  return !_is_default_instance_ && edge_ != NULL;
}
inline void FindResponse::clear_edge() {
  if (GetArenaNoVirtual() == NULL && edge_ != NULL) delete edge_;
  edge_ = NULL;
}
inline const ::expath::Edge& FindResponse::edge() const {
  // @@protoc_insertion_point(field_get:expath.FindResponse.edge)
  return edge_ != NULL ? *edge_ : *default_instance_->edge_;
}
inline ::expath::Edge* FindResponse::mutable_edge() {
  
  if (edge_ == NULL) {
    edge_ = new ::expath::Edge;
  }
  // @@protoc_insertion_point(field_mutable:expath.FindResponse.edge)
  return edge_;
}
inline ::expath::Edge* FindResponse::release_edge() {
  // @@protoc_insertion_point(field_release:expath.FindResponse.edge)
  
  ::expath::Edge* temp = edge_;
  edge_ = NULL;
  return temp;
}
inline void FindResponse::set_allocated_edge(::expath::Edge* edge) {
  delete edge_;
  edge_ = edge;
  if (edge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:expath.FindResponse.edge)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace expath

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::expath::Edge_ConnectionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::expath::Edge_ConnectionType>() {
  return ::expath::Edge_ConnectionType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_expath_2eproto__INCLUDED
